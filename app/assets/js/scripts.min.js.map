{"version":3,"sources":["rellax.js","glide.js","aos.js","accordions.js","cookie-notice.js","notification.js","random-quote.js","slider.js","scripts.js"],"names":["root","factory","define","amd","module","exports","Rellax","this","el","options","self","Object","create","prototype","posY","screenY","posX","screenX","blocks","pause","loop","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","oRequestAnimationFrame","callback","setTimeout","loopId","clearLoop","cancelAnimationFrame","mozCancelAnimationFrame","clearTimeout","transformProp","testEl","document","createElement","style","transform","vendors","vendor","undefined","speed","center","wrapper","relativeToWrapper","round","vertical","horizontal","keys","forEach","key","elements","querySelectorAll","length","Error","elems","nodeType","querySelector","cacheBlocks","i","block","createBlock","push","init","cssText","innerHeight","innerWidth","setPosition","addEventListener","animate","dataPercentage","getAttribute","dataSpeed","dataZindex","wrapperPosY","scrollTop","pageYOffset","documentElement","body","scrollPosY","offsetTop","pageXOffset","scrollLeft","blockTop","getBoundingClientRect","top","blockHeight","clientHeight","offsetHeight","scrollHeight","blockLeft","left","blockWidth","clientWidth","offsetWidth","scrollWidth","percentageY","percentageX","bases","updatePosition","indexOf","index","trimmedStyle","slice","delimiter","replace","baseX","x","baseY","y","height","width","zindex","oldY","oldX","parentNode","result","valueX","valueY","Math","update","positions","positionY","positionX","translate","destroy","removeEventListener","refresh","global","Glide","warn","msg","console","error","toInt","value","parseInt","toFloat","parseFloat","isString","isObject","type","_typeof","isNumber","isFunction","isUndefined","isArray","constructor","Array","mount","glide","extensions","events","components","name","_name","obj","prop","definition","defineProperty","sortKeys","sort","reduce","r","k","mergeOptions","defaults","settings","_extends","hasOwnProperty","classes","direction","breakpoints","Run","Components","Events","_o","make","move","_this","disabled","disable","emit","calculate","Transition","after","isOffset","enable","steps","countableSteps","isEnd","isType","rewind","min","isStart","get","_m","set","substr","Html","slides","focusAt","bound","perView","now","Date","getTime","throttle","func","wait","timeout","context","args","previous","later","leading","apply","throttled","at","remaining","arguments","trailing","cancel","Gaps","len","Direction","MARGIN_TYPE","remove","marginLeft","marginRight","gap","Sizes","on","children","siblings","node","n","firstChild","matched","nextSibling","exist","HTMLElement","selector","track","TRACK_SELECTOR","call","filter","slide","classList","contains","cloneSlide","_r","_t","t","Peek","peek","_v","before","Move","offset","movement","slideWidth","is","setupSlides","setupWrapper","dimention","wrapperSize","grow","Clones","reductor","Build","typeClass","activeClass","add","activeSlide","sibling","removeClasses","items","collect","_Glide$settings","peekIncrementer","part","start","end","max","floor","clone","cloneNode","_i","_clone","unshift","append","_Components$Html","half","prepend","reverse","appendChild","_i2","insertBefore","_i3","removeChild","Resize","Binder","EventsBinder","bind","unbind","off","resolve","pattern","token","split","join","FLIPED_MOVEMENTS","addClass","removeClass","VALID_DIRECTIONS","Rtl","modify","Gap","Grow","Peeking","Focusing","mutator","TRANSFORMERS","concat","mutate","transformer","Translate","compose","property","animationTimingFunc","duration","transition","rewindDuration","animationDuration","Swipe","swipeSin","swipeStartX","swipeStartY","moveable","capture","supportsPassive$1","passive","bindSwipeStart","event","swipe","touches","pageX","pageY","bindSwipeMove","bindSwipeEnd","touchAngle","touchRatio","subExSx","subEySy","powEX","abs","powEY","swipeHypotenuse","sqrt","swipeCathetus","asin","PI","stopPropagation","dragging","threshold","swipeDistance","swipeDeg","perTouch","unbindSwipeMove","unbindSwipeEnd","swipeThreshold","START_EVENTS","dragThreshold","unbindSwipeStart","_this2","MOVE_EVENTS","_this3","END_EVENTS","MOUSE_EVENTS","changedTouches","swipeable","Images","dragstart","preventDefault","Anchors","detached","prevented","_a","click","detach","draggable","setAttribute","removeAttribute","attach","Controls","_n","NAV_SELECTOR","_c","CONTROLS_SELECTOR","addBindings","setActive","removeActive","controls","item","activeNav","removeBindings","currentTarget","Keyboard","keyboard","press","keyCode","Autoplay","hoverpause","autoplay","setInterval","stop","time","clearInterval","sortBreakpoints","points","Breakpoints","match","matchMedia","point","matches","startAt","ltr","rtl","slider","carousel","disabledArrow","Symbol","iterator","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","assign","source","object","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","inherits","subClass","superClass","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","EventsBus","hop","handler","_e","transformers","distance","interval","o","_d","status","listeners","closure",">","<","=","supportsPassive","opts","e","COMPONENTS","Glide$1","_Core","Glide$$1","AOS","id","loaded","m","c","p","__esModule","default","a","u","s","f","d","l","b","v","g","h","w","delay","easing","once","startEvent","throttleDelay","debounceDelay","disableMutationObserver","j","O","M","S","mobile","phone","tablet","_","all","atob","isSupported","info","readyState","ready","refreshHard","maxWait","flush","valueOf","test","NaN","toString","dataset","aos","MutationObserver","WebKitMutationObserver","MozMutationObserver","observe","childList","subtree","removedNodes","addedNodes","navigator","userAgent","opera","position","anchor","anchorPlacement","isNaN","offsetLeft","tagName","offsetParent","map","ac","accordions","accItem","$","accContent","title","bindUIActions","log","closest","find","slideToggle","as","cn","cookieNotice","notice","close","nf","notification","rq","randomQuote","quoteList","random","hide","eq","show","rl","rellax","getElementsByClassName","gl"],"mappings":"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","file":"scripts.min.js","sourcesContent":["var rl,\nrellax = {\n\tsettings: {\n\n\t},\n\tinit: function() {\n\t\trl = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('rellax loaded!');\n\t},\n\tbindUIActions: function() {\n\t\tif (document.getElementsByClassName('rellax').length != 0) {\n\t\t\tvar rellax = new Rellax('.rellax', {\n\t\t\t\tspeed: -2,\n\t\t\t\tcenter: false,\n\t\t\t\twrapper: null,\n\t\t\t\tround: true,\n\t\t\t\tvertical: true,\n\t\t\t\thorizontal: false\n\t\t\t});\n\t\t}\n\t}\n};\n","/*!\n * Glide.js v3.2.4\n * (c) 2013-2018 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)\n * Released under the MIT License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Glide = factory());\n}(this, (function () { 'use strict';\n\n  var defaults = {\n    /**\n     * Type of the movement.\n     *\n     * Available types:\n     * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.\n     * `carousel` - Changes slides without starting over when it reaches the first or last slide.\n     *\n     * @type {String}\n     */\n    type: 'slider',\n\n    /**\n     * Start at specific slide number defined with zero-based index.\n     *\n     * @type {Number}\n     */\n    startAt: 0,\n\n    /**\n     * A number of slides visible on the single viewport.\n     *\n     * @type {Number}\n     */\n    perView: 1,\n\n    /**\n     * Focus currently active slide at a specified position in the track.\n     *\n     * Available inputs:\n     * `center` - Current slide will be always focused at the center of a track.\n     * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.\n     *\n     * @type {String|Number}\n     */\n    focusAt: 0,\n\n    /**\n     * A size of the gap added between slides.\n     *\n     * @type {Number}\n     */\n    gap: 10,\n\n    /**\n     * Change slides after a specified interval. Use `false` for turning off autoplay.\n     *\n     * @type {Number|Boolean}\n     */\n    autoplay: false,\n\n    /**\n     * Stop autoplay on mouseover event.\n     *\n     * @type {Boolean}\n     */\n    hoverpause: true,\n\n    /**\n     * Allow for changing slides with left and right keyboard arrows.\n     *\n     * @type {Boolean}\n     */\n    keyboard: true,\n\n    /**\n     * Stop running `perView` number of slides from the end. Use this\n     * option if you don't want to have an empty space after\n     * a slider. Works only with `slider` type and a\n     * non-centered `focusAt` setting.\n     *\n     * @type {Boolean}\n     */\n    bound: false,\n\n    /**\n     * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.\n     *\n     * @type {Number|Boolean}\n     */\n    swipeThreshold: 80,\n\n    /**\n     * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.\n     *\n     * @type {Number|Boolean}\n     */\n    dragThreshold: 120,\n\n    /**\n     * A maximum number of slides to which movement will be made on swiping or dragging. Use `false` for unlimited.\n     *\n     * @type {Number|Boolean}\n     */\n    perTouch: false,\n\n    /**\n     * Moving distance ratio of the slides on a swiping and dragging.\n     *\n     * @type {Number}\n     */\n    touchRatio: 0.5,\n\n    /**\n     * Angle required to activate slides moving on swiping or dragging.\n     *\n     * @type {Number}\n     */\n    touchAngle: 45,\n\n    /**\n     * Duration of the animation in milliseconds.\n     *\n     * @type {Number}\n     */\n    animationDuration: 400,\n\n    /**\n     * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.\n     *\n     * @type {Boolean}\n     */\n    rewind: true,\n\n    /**\n     * Duration of the rewinding animation of the `slider` type in milliseconds.\n     *\n     * @type {Number}\n     */\n    rewindDuration: 800,\n\n    /**\n     * Easing function for the animation.\n     *\n     * @type {String}\n     */\n    animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',\n\n    /**\n     * Throttle costly events at most once per every wait milliseconds.\n     *\n     * @type {Number}\n     */\n    throttle: 10,\n\n    /**\n     * Moving direction mode.\n     *\n     * Available inputs:\n     * - 'ltr' - left to right movement,\n     * - 'rtl' - right to left movement.\n     *\n     * @type {String}\n     */\n    direction: 'ltr',\n\n    /**\n     * The distance value of the next and previous viewports which\n     * have to peek in the current view. Accepts number and\n     * pixels as a string. Left and right peeking can be\n     * set up separately with a directions object.\n     *\n     * For example:\n     * `100` - Peek 100px on the both sides.\n     * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.\n     *\n     * @type {Number|String|Object}\n     */\n    peek: 0,\n\n    /**\n     * Collection of options applied at specified media breakpoints.\n     * For example: display two slides per view under 800px.\n     * `{\n     *   '800px': {\n     *     perView: 2\n     *   }\n     * }`\n     */\n    breakpoints: {},\n\n    /**\n     * Collection of internally used HTML classes.\n     *\n     * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object\n     * @type {Object}\n     */\n    classes: {\n      direction: {\n        ltr: 'glide--ltr',\n        rtl: 'glide--rtl'\n      },\n      slider: 'glide--slider',\n      carousel: 'glide--carousel',\n      swipeable: 'glide--swipeable',\n      dragging: 'glide--dragging',\n      cloneSlide: 'glide__slide--clone',\n      activeNav: 'glide__bullet--active',\n      activeSlide: 'glide__slide--active',\n      disabledArrow: 'glide__arrow--disabled'\n    }\n  };\n\n  /**\n   * Outputs warning message to the bowser console.\n   *\n   * @param  {String} msg\n   * @return {Void}\n   */\n  function warn(msg) {\n    console.error(\"[Glide warn]: \" + msg);\n  }\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  };\n\n  var inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  /**\n   * Converts value entered as number\n   * or string to integer value.\n   *\n   * @param {String} value\n   * @returns {Number}\n   */\n  function toInt(value) {\n    return parseInt(value);\n  }\n\n  /**\n   * Converts value entered as number\n   * or string to flat value.\n   *\n   * @param {String} value\n   * @returns {Number}\n   */\n  function toFloat(value) {\n    return parseFloat(value);\n  }\n\n  /**\n   * Indicates whether the specified value is a string.\n   *\n   * @param  {*}   value\n   * @return {Boolean}\n   */\n  function isString(value) {\n    return typeof value === 'string';\n  }\n\n  /**\n   * Indicates whether the specified value is an object.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   *\n   * @see https://github.com/jashkenas/underscore\n   */\n  function isObject(value) {\n    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n    return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators\n  }\n\n  /**\n   * Indicates whether the specified value is a number.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n  function isNumber(value) {\n    return typeof value === 'number';\n  }\n\n  /**\n   * Indicates whether the specified value is a function.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n\n  /**\n   * Indicates whether the specified value is undefined.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Indicates whether the specified value is an array.\n   *\n   * @param  {*} value\n   * @return {Boolean}\n   */\n  function isArray(value) {\n    return value.constructor === Array;\n  }\n\n  /**\n   * Creates and initializes specified collection of extensions.\n   * Each extension receives access to instance of glide and rest of components.\n   *\n   * @param {Object} glide\n   * @param {Object} extensions\n   *\n   * @returns {Object}\n   */\n  function mount(glide, extensions, events) {\n    var components = {};\n\n    for (var name in extensions) {\n      if (isFunction(extensions[name])) {\n        components[name] = extensions[name](glide, components, events);\n      } else {\n        warn('Extension must be a function');\n      }\n    }\n\n    for (var _name in components) {\n      if (isFunction(components[_name].mount)) {\n        components[_name].mount();\n      }\n    }\n\n    return components;\n  }\n\n  /**\n   * Defines getter and setter property on the specified object.\n   *\n   * @param  {Object} obj         Object where property has to be defined.\n   * @param  {String} prop        Name of the defined property.\n   * @param  {Object} definition  Get and set definitions for the property.\n   * @return {Void}\n   */\n  function define(obj, prop, definition) {\n    Object.defineProperty(obj, prop, definition);\n  }\n\n  /**\n   * Sorts aphabetically object keys.\n   *\n   * @param  {Object} obj\n   * @return {Object}\n   */\n  function sortKeys(obj) {\n    return Object.keys(obj).sort().reduce(function (r, k) {\n      r[k] = obj[k];\n\n      return r[k], r;\n    }, {});\n  }\n\n  /**\n   * Merges passed settings object with default options.\n   *\n   * @param  {Object} defaults\n   * @param  {Object} settings\n   * @return {Object}\n   */\n  function mergeOptions(defaults, settings) {\n    var options = _extends({}, defaults, settings);\n\n    // `Object.assign` do not deeply merge objects, so we\n    // have to do it manually for every nested object\n    // in options. Although it does not look smart,\n    // it's smaller and faster than some fancy\n    // merging deep-merge algorithm script.\n    if (settings.hasOwnProperty('classes')) {\n      options.classes = _extends({}, defaults.classes, settings.classes);\n\n      if (settings.classes.hasOwnProperty('direction')) {\n        options.classes.direction = _extends({}, defaults.classes.direction, settings.classes.direction);\n      }\n    }\n\n    if (settings.hasOwnProperty('breakpoints')) {\n      options.breakpoints = _extends({}, defaults.breakpoints, settings.breakpoints);\n    }\n\n    return options;\n  }\n\n  var EventsBus = function () {\n    /**\n     * Construct a EventBus instance.\n     *\n     * @param {Object} events\n     */\n    function EventsBus() {\n      var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      classCallCheck(this, EventsBus);\n\n      this.events = events;\n      this.hop = events.hasOwnProperty;\n    }\n\n    /**\n     * Adds listener to the specifed event.\n     *\n     * @param {String|Array} event\n     * @param {Function} handler\n     */\n\n\n    createClass(EventsBus, [{\n      key: 'on',\n      value: function on(event, handler) {\n        if (isArray(event)) {\n          for (var i = 0; i < event.length; i++) {\n            this.on(event[i], handler);\n          }\n        }\n\n        // Create the event's object if not yet created\n        if (!this.hop.call(this.events, event)) {\n          this.events[event] = [];\n        }\n\n        // Add the handler to queue\n        var index = this.events[event].push(handler) - 1;\n\n        // Provide handle back for removal of event\n        return {\n          remove: function remove() {\n            delete this.events[event][index];\n          }\n        };\n      }\n\n      /**\n       * Runs registered handlers for specified event.\n       *\n       * @param {String|Array} event\n       * @param {Object=} context\n       */\n\n    }, {\n      key: 'emit',\n      value: function emit(event, context) {\n        if (isArray(event)) {\n          for (var i = 0; i < event.length; i++) {\n            this.emit(event[i], context);\n          }\n        }\n\n        // If the event doesn't exist, or there's no handlers in queue, just leave\n        if (!this.hop.call(this.events, event)) {\n          return;\n        }\n\n        // Cycle through events queue, fire!\n        this.events[event].forEach(function (item) {\n          item(context || {});\n        });\n      }\n    }]);\n    return EventsBus;\n  }();\n\n  var Glide = function () {\n    /**\r\n     * Construct glide.\r\n     *\r\n     * @param  {String} selector\r\n     * @param  {Object} options\r\n     */\n    function Glide(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      classCallCheck(this, Glide);\n\n      this._c = {};\n      this._t = [];\n      this._e = new EventsBus();\n\n      this.disabled = false;\n      this.selector = selector;\n      this.settings = mergeOptions(defaults, options);\n      this.index = this.settings.startAt;\n    }\n\n    /**\r\n     * Initializes glide.\r\n     *\r\n     * @param {Object} extensions Collection of extensions to initialize.\r\n     * @return {Glide}\r\n     */\n\n\n    createClass(Glide, [{\n      key: 'mount',\n      value: function mount$$1() {\n        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        this._e.emit('mount.before');\n\n        if (isObject(extensions)) {\n          this._c = mount(this, extensions, this._e);\n        } else {\n          warn('You need to provide a object on `mount()`');\n        }\n\n        this._e.emit('mount.after');\n\n        return this;\n      }\n\n      /**\r\n       * Collects an instance `translate` transformers.\r\n       *\r\n       * @param  {Array} transformers Collection of transformers.\r\n       * @return {Void}\r\n       */\n\n    }, {\n      key: 'mutate',\n      value: function mutate() {\n        var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        if (isArray(transformers)) {\n          this._t = transformers;\n        } else {\n          warn('You need to provide a array on `mutate()`');\n        }\n\n        return this;\n      }\n\n      /**\r\n       * Updates glide with specified settings.\r\n       *\r\n       * @param {Object} settings\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'update',\n      value: function update() {\n        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        this.settings = mergeOptions(this.settings, settings);\n\n        if (settings.hasOwnProperty('startAt')) {\n          this.index = settings.startAt;\n        }\n\n        this._e.emit('update');\n\n        return this;\n      }\n\n      /**\r\n       * Change slide with specified pattern. A pattern must be in the special format:\r\n       * `>` - Move one forward\r\n       * `<` - Move one backward\r\n       * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)\r\n       * `>>` - Rewinds to end (last slide)\r\n       * `<<` - Rewinds to start (first slide)\r\n       *\r\n       * @param {String} pattern\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'go',\n      value: function go(pattern) {\n        this._c.Run.make(pattern);\n\n        return this;\n      }\n\n      /**\r\n       * Move track by specified distance.\r\n       *\r\n       * @param {String} distance\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'move',\n      value: function move(distance) {\n        this._c.Transition.disable();\n        this._c.Move.make(distance);\n\n        return this;\n      }\n\n      /**\r\n       * Destroy instance and revert all changes done by this._c.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._e.emit('destroy');\n\n        return this;\n      }\n\n      /**\r\n       * Start instance autoplaying.\r\n       *\r\n       * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'play',\n      value: function play() {\n        var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        if (interval) {\n          this.settings.autoplay = interval;\n        }\n\n        this._e.emit('play');\n\n        return this;\n      }\n\n      /**\r\n       * Stop instance autoplaying.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'pause',\n      value: function pause() {\n        this._e.emit('pause');\n\n        return this;\n      }\n\n      /**\r\n       * Sets glide into a idle status.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'disable',\n      value: function disable() {\n        this.disabled = true;\n\n        return this;\n      }\n\n      /**\r\n       * Sets glide into a active status.\r\n       *\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'enable',\n      value: function enable() {\n        this.disabled = false;\n\n        return this;\n      }\n\n      /**\r\n       * Adds cuutom event listener with handler.\r\n       *\r\n       * @param  {String|Array} event\r\n       * @param  {Function} handler\r\n       * @return {Glide}\r\n       */\n\n    }, {\n      key: 'on',\n      value: function on(event, handler) {\n        this._e.on(event, handler);\n\n        return this;\n      }\n\n      /**\r\n       * Checks if glide is a precised type.\r\n       *\r\n       * @param  {String} name\r\n       * @return {Boolean}\r\n       */\n\n    }, {\n      key: 'isType',\n      value: function isType(name) {\n        return this.settings.type === name;\n      }\n\n      /**\r\n       * Gets value of the core options.\r\n       *\r\n       * @return {Object}\r\n       */\n\n    }, {\n      key: 'settings',\n      get: function get$$1() {\n        return this._o;\n      }\n\n      /**\r\n       * Sets value of the core options.\r\n       *\r\n       * @param  {Object} o\r\n       * @return {Void}\r\n       */\n      ,\n      set: function set$$1(o) {\n        if (isObject(o)) {\n          this._o = o;\n        } else {\n          warn('Options must be an `object` instance.');\n        }\n      }\n\n      /**\r\n       * Gets current index of the slider.\r\n       *\r\n       * @return {Object}\r\n       */\n\n    }, {\n      key: 'index',\n      get: function get$$1() {\n        return this._i;\n      }\n\n      /**\r\n       * Sets current index a slider.\r\n       *\r\n       * @return {Object}\r\n       */\n      ,\n      set: function set$$1(i) {\n        this._i = toInt(i);\n      }\n\n      /**\r\n       * Gets type name of the slider.\r\n       *\r\n       * @return {String}\r\n       */\n\n    }, {\n      key: 'type',\n      get: function get$$1() {\n        return this.settings.type;\n      }\n\n      /**\r\n       * Gets value of the idle status.\r\n       *\r\n       * @return {Boolean}\r\n       */\n\n    }, {\n      key: 'disabled',\n      get: function get$$1() {\n        return this._d;\n      }\n\n      /**\r\n       * Sets value of the idle status.\r\n       *\r\n       * @return {Boolean}\r\n       */\n      ,\n      set: function set$$1(status) {\n        this._d = !!status;\n      }\n    }]);\n    return Glide;\n  }();\n\n  function Run (Glide, Components, Events) {\n    var Run = {\n      /**\n       * Initializes autorunning of the glide.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this._o = false;\n      },\n\n\n      /**\n       * Makes glides running based on the passed moving schema.\n       *\n       * @param {String} move\n       */\n      make: function make(move) {\n        var _this = this;\n\n        if (!Glide.disabled) {\n          Glide.disable();\n\n          this.move = move;\n\n          Events.emit('run.before', this.move);\n\n          this.calculate();\n\n          Events.emit('run', this.move);\n\n          Components.Transition.after(function () {\n            if (_this.isOffset('<') || _this.isOffset('>')) {\n              _this._o = false;\n\n              Events.emit('run.offset', _this.move);\n            }\n\n            Events.emit('run.after', _this.move);\n\n            Glide.enable();\n          });\n        }\n      },\n\n\n      /**\n       * Calculates current index based on defined move.\n       *\n       * @return {Void}\n       */\n      calculate: function calculate() {\n        var move = this.move,\n            length = this.length;\n        var steps = move.steps,\n            direction = move.direction;\n\n\n        var countableSteps = isNumber(toInt(steps)) && toInt(steps) !== 0;\n\n        switch (direction) {\n          case '>':\n            if (steps === '>') {\n              Glide.index = length;\n            } else if (this.isEnd()) {\n              if (!(Glide.isType('slider') && !Glide.settings.rewind)) {\n                this._o = true;\n\n                Glide.index = 0;\n              }\n\n              Events.emit('run.end', move);\n            } else if (countableSteps) {\n              Glide.index += Math.min(length - Glide.index, -toInt(steps));\n            } else {\n              Glide.index++;\n            }\n            break;\n\n          case '<':\n            if (steps === '<') {\n              Glide.index = 0;\n            } else if (this.isStart()) {\n              if (!(Glide.isType('slider') && !Glide.settings.rewind)) {\n                this._o = true;\n\n                Glide.index = length;\n              }\n\n              Events.emit('run.start', move);\n            } else if (countableSteps) {\n              Glide.index -= Math.min(Glide.index, toInt(steps));\n            } else {\n              Glide.index--;\n            }\n            break;\n\n          case '=':\n            Glide.index = steps;\n            break;\n        }\n      },\n\n\n      /**\n       * Checks if we are on the first slide.\n       *\n       * @return {Boolean}\n       */\n      isStart: function isStart() {\n        return Glide.index === 0;\n      },\n\n\n      /**\n       * Checks if we are on the last slide.\n       *\n       * @return {Boolean}\n       */\n      isEnd: function isEnd() {\n        return Glide.index === this.length;\n      },\n\n\n      /**\n       * Checks if we are making a offset run.\n       *\n       * @param {String} direction\n       * @return {Boolean}\n       */\n      isOffset: function isOffset(direction) {\n        return this._o && this.move.direction === direction;\n      }\n    };\n\n    define(Run, 'move', {\n      /**\n       * Gets value of the move schema.\n       *\n       * @returns {Object}\n       */\n      get: function get() {\n        return this._m;\n      },\n\n\n      /**\n       * Sets value of the move schema.\n       *\n       * @returns {Object}\n       */\n      set: function set(value) {\n        this._m = {\n          direction: value.substr(0, 1),\n          steps: value.substr(1) ? value.substr(1) : 0\n        };\n      }\n    });\n\n    define(Run, 'length', {\n      /**\n       * Gets value of the running distance based\n       * on zero-indexing number of slides.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var settings = Glide.settings;\n        var length = Components.Html.slides.length;\n\n        // If the `bound` option is acitve, a maximum running distance should be\n        // reduced by `perView` and `focusAt` settings. Running distance\n        // should end before creating an empty space after instance.\n\n        if (Glide.isType('slider') && settings.focusAt !== 'center' && settings.bound) {\n          return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);\n        }\n\n        return length - 1;\n      }\n    });\n\n    define(Run, 'offset', {\n      /**\n       * Gets status of the offsetting flag.\n       *\n       * @return {Boolean}\n       */\n      get: function get() {\n        return this._o;\n      }\n    });\n\n    return Run;\n  }\n\n  /**\n   * Returns a current time.\n   *\n   * @return {Number}\n   */\n  function now() {\n    return new Date().getTime();\n  }\n\n  /**\n   * Returns a function, that, when invoked, will only be triggered\n   * at most once during a given window of time.\n   *\n   * @param {Function} func\n   * @param {Number} wait\n   * @param {Object=} options\n   * @return {Function}\n   *\n   * @see https://github.com/jashkenas/underscore\n   */\n  function throttle(func, wait, options) {\n    var timeout = void 0,\n        context = void 0,\n        args = void 0,\n        result = void 0;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function later() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function throttled() {\n      var at = now();\n      if (!previous && options.leading === false) previous = at;\n      var remaining = wait - (at - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = at;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function () {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }\n\n  var MARGIN_TYPE = {\n    ltr: ['marginLeft', 'marginRight'],\n    rtl: ['marginRight', 'marginLeft']\n  };\n\n  function Gaps (Glide, Components, Events) {\n    var Gaps = {\n      /**\n       * Applies gaps between slides. First and last\n       * slides do not receive it's edge margins.\n       *\n       * @param {HTMLCollection} slides\n       * @return {Void}\n       */\n      apply: function apply(slides) {\n        for (var i = 0, len = slides.length; i < len; i++) {\n          var style = slides[i].style;\n          var direction = Components.Direction.value;\n\n          if (i !== 0) {\n            style[MARGIN_TYPE[direction][0]] = this.value / 2 + 'px';\n          } else {\n            style[MARGIN_TYPE[direction][0]] = '';\n          }\n\n          if (i !== slides.length - 1) {\n            style[MARGIN_TYPE[direction][1]] = this.value / 2 + 'px';\n          } else {\n            style[MARGIN_TYPE[direction][1]] = '';\n          }\n        }\n      },\n\n\n      /**\n       * Removes gaps from the slides.\n       *\n       * @param {HTMLCollection} slides\n       * @returns {Void}\n      */\n      remove: function remove(slides) {\n        for (var i = 0, len = slides.length; i < len; i++) {\n          var style = slides[i].style;\n\n          style.marginLeft = '';\n          style.marginRight = '';\n        }\n      }\n    };\n\n    define(Gaps, 'value', {\n      /**\n       * Gets value of the gap.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return toInt(Glide.settings.gap);\n      }\n    });\n\n    define(Gaps, 'grow', {\n      /**\n       * Gets additional dimentions value caused by gaps.\n       * Used to increase width of the slides wrapper.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return Gaps.value * (Components.Sizes.length - 1);\n      }\n    });\n\n    define(Gaps, 'reductor', {\n      /**\n       * Gets reduction value caused by gaps.\n       * Used to subtract width of the slides.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        var perView = Glide.settings.perView;\n\n        return Gaps.value * (perView - 1) / perView;\n      }\n    });\n\n    /**\n     * Apply calculated gaps:\n     * - after building, so slides (including clones) will receive proper margins\n     * - on updating via API, to recalculate gaps with new options\n     */\n    Events.on(['build.after', 'update'], throttle(function () {\n      Gaps.apply(Components.Html.wrapper.children);\n    }, 30));\n\n    /**\n     * Remove gaps:\n     * - on destroying to bring markup to its inital state\n     */\n    Events.on('destroy', function () {\n      Gaps.remove(Components.Html.wrapper.children);\n    });\n\n    return Gaps;\n  }\n\n  /**\n   * Finds siblings nodes of the passed node.\n   *\n   * @param  {Element} node\n   * @return {Array}\n   */\n  function siblings(node) {\n    if (node && node.parentNode) {\n      var n = node.parentNode.firstChild;\n      var matched = [];\n\n      for (; n; n = n.nextSibling) {\n        if (n.nodeType === 1 && n !== node) {\n          matched.push(n);\n        }\n      }\n\n      return matched;\n    }\n\n    return [];\n  }\n\n  /**\n   * Checks if passed node exist and is a valid element.\n   *\n   * @param  {Element} node\n   * @return {Boolean}\n   */\n  function exist(node) {\n    if (node && node instanceof window.HTMLElement) {\n      return true;\n    }\n\n    return false;\n  }\n\n  var TRACK_SELECTOR = '[data-glide-el=\"track\"]';\n\n  function Html (Glide, Components) {\n    var Html = {\n      /**\n       * Setup slider HTML nodes.\n       *\n       * @param {Glide} glide\n       */\n      mount: function mount() {\n        this.root = Glide.selector;\n        this.track = this.root.querySelector(TRACK_SELECTOR);\n        this.slides = Array.prototype.slice.call(this.wrapper.children).filter(function (slide) {\n          return !slide.classList.contains(Glide.settings.classes.cloneSlide);\n        });\n      }\n    };\n\n    define(Html, 'root', {\n      /**\n       * Gets node of the glide main element.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html._r;\n      },\n\n\n      /**\n       * Sets node of the glide main element.\n       *\n       * @return {Object}\n       */\n      set: function set(r) {\n        if (isString(r)) {\n          r = document.querySelector(r);\n        }\n\n        if (exist(r)) {\n          Html._r = r;\n        } else {\n          warn('Root element must be a existing Html node');\n        }\n      }\n    });\n\n    define(Html, 'track', {\n      /**\n       * Gets node of the glide track with slides.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html._t;\n      },\n\n\n      /**\n       * Sets node of the glide track with slides.\n       *\n       * @return {Object}\n       */\n      set: function set(t) {\n        if (exist(t)) {\n          Html._t = t;\n        } else {\n          warn('Could not find track element. Please use ' + TRACK_SELECTOR + ' attribute.');\n        }\n      }\n    });\n\n    define(Html, 'wrapper', {\n      /**\n       * Gets node of the slides wrapper.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Html.track.children[0];\n      }\n    });\n\n    return Html;\n  }\n\n  function Peek (Glide, Components, Events) {\n    var Peek = {\n      /**\n       * Setups how much to peek based on settings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.value = Glide.settings.peek;\n      }\n    };\n\n    define(Peek, 'value', {\n      /**\n       * Gets value of the peek.\n       *\n       * @returns {Number|Object}\n       */\n      get: function get() {\n        return Peek._v;\n      },\n\n\n      /**\n       * Sets value of the peek.\n       *\n       * @param {Number|Object} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        if (isObject(value)) {\n          value.before = toInt(value.before);\n          value.after = toInt(value.after);\n        } else {\n          value = toInt(value);\n        }\n\n        Peek._v = value;\n      }\n    });\n\n    define(Peek, 'reductor', {\n      /**\n       * Gets reduction value caused by peek.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        var value = Peek.value;\n        var perView = Glide.settings.perView;\n\n        if (isObject(value)) {\n          return value.before / perView + value.after / perView;\n        }\n\n        return value * 2 / perView;\n      }\n    });\n\n    /**\n     * Recalculate peeking sizes on:\n     * - when resizing window to update to proper percents\n     */\n    Events.on(['resize', 'update'], function () {\n      Peek.mount();\n    });\n\n    return Peek;\n  }\n\n  function Move (Glide, Components, Events) {\n    var Move = {\n      /**\n       * Constructs move component.\n       *\n       * @returns {Void}\n       */\n      mount: function mount() {\n        this._o = 0;\n      },\n\n\n      /**\n       * Calculates a movement value based on passed offset and currently active index.\n       *\n       * @param  {Number} offset\n       * @return {Void}\n       */\n      make: function make() {\n        var _this = this;\n\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this.offset = offset;\n\n        Events.emit('move', {\n          movement: this.value\n        });\n\n        Components.Transition.after(function () {\n          Events.emit('move.after', {\n            movement: _this.value\n          });\n        });\n      }\n    };\n\n    define(Move, 'offset', {\n      /**\n       * Gets an offset value used to modify current translate.\n       *\n       * @return {Object}\n       */\n      get: function get() {\n        return Move._o;\n      },\n\n\n      /**\n       * Sets an offset value used to modify current translate.\n       *\n       * @return {Object}\n       */\n      set: function set(value) {\n        Move._o = !isUndefined(value) ? toInt(value) : 0;\n      }\n    });\n\n    define(Move, 'translate', {\n      /**\n       * Gets a raw movement value.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Sizes.slideWidth * Glide.index;\n      }\n    });\n\n    define(Move, 'value', {\n      /**\n       * Gets an actual movement value corrected by offset.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var offset = this.offset;\n        var translate = this.translate;\n\n        if (Components.Direction.is('rtl')) {\n          return translate + offset;\n        }\n\n        return translate - offset;\n      }\n    });\n\n    /**\n     * Make movement to proper slide on:\n     * - before build, so glide will start at `startAt` index\n     * - on each standard run to move to newly calculated index\n     */\n    Events.on(['build.before', 'run'], function () {\n      Move.make();\n    });\n\n    return Move;\n  }\n\n  function Sizes (Glide, Components, Events) {\n    var Sizes = {\n      /**\n       * Setups dimentions of slides.\n       *\n       * @return {Void}\n       */\n      setupSlides: function setupSlides() {\n        var slides = Components.Html.slides;\n\n        for (var i = 0; i < slides.length; i++) {\n          slides[i].style.width = this.slideWidth + 'px';\n        }\n      },\n\n\n      /**\n       * Setups dimentions of slides wrapper.\n       *\n       * @return {Void}\n       */\n      setupWrapper: function setupWrapper(dimention) {\n        Components.Html.wrapper.style.width = this.wrapperSize + 'px';\n      },\n\n\n      /**\n       * Removes applied styles from HTML elements.\n       *\n       * @returns {Void}\n       */\n      remove: function remove() {\n        var slides = Components.Html.slides;\n\n        for (var i = 0; i < slides.length; i++) {\n          slides[i].style.width = '';\n        }\n\n        Components.Html.wrapper.style.width = '';\n      }\n    };\n\n    define(Sizes, 'length', {\n      /**\n       * Gets count number of the slides.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Html.slides.length;\n      }\n    });\n\n    define(Sizes, 'width', {\n      /**\n       * Gets width value of the glide.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Components.Html.root.offsetWidth;\n      }\n    });\n\n    define(Sizes, 'wrapperSize', {\n      /**\n       * Gets size of the slides wrapper.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;\n      }\n    });\n\n    define(Sizes, 'slideWidth', {\n      /**\n       * Gets width value of the single slide.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;\n      }\n    });\n\n    /**\n     * Apply calculated glide's dimensions:\n     * - before building, so other dimentions (e.g. translate) will be calculated propertly\n     * - when resizing window to recalculate sildes dimensions\n     * - on updating via API, to calculate dimensions based on new options\n     */\n    Events.on(['build.before', 'resize', 'update'], function () {\n      Sizes.setupSlides();\n      Sizes.setupWrapper();\n    });\n\n    /**\n     * Remove calculated glide's dimensions:\n     * - on destoting to bring markup to its inital state\n     */\n    Events.on('destroy', function () {\n      Sizes.remove();\n    });\n\n    return Sizes;\n  }\n\n  function Build (Glide, Components, Events) {\n    var Build = {\n      /**\n       * Init glide building. Adds classes, sets\n       * dimensions and setups initial state.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        Events.emit('build.before');\n\n        this.typeClass();\n        this.activeClass();\n\n        Events.emit('build.after');\n      },\n\n\n      /**\n       * Adds `type` class to the glide element.\n       *\n       * @return {Void}\n       */\n      typeClass: function typeClass() {\n        Components.Html.root.classList.add(Glide.settings.classes[Glide.settings.type]);\n      },\n\n\n      /**\n       * Sets active class to current slide.\n       *\n       * @return {Void}\n       */\n      activeClass: function activeClass() {\n        var classes = Glide.settings.classes;\n        var slide = Components.Html.slides[Glide.index];\n\n        if (slide) {\n          slide.classList.add(classes.activeSlide);\n\n          siblings(slide).forEach(function (sibling) {\n            sibling.classList.remove(classes.activeSlide);\n          });\n        }\n      },\n\n\n      /**\n       * Removes HTML classes applied at building.\n       *\n       * @return {Void}\n       */\n      removeClasses: function removeClasses() {\n        var classes = Glide.settings.classes;\n\n        Components.Html.root.classList.remove(classes[Glide.settings.type]);\n\n        Components.Html.slides.forEach(function (sibling) {\n          sibling.classList.remove(classes.activeSlide);\n        });\n      }\n    };\n\n    /**\n     * Clear building classes:\n     * - on destroying to bring HTML to its initial state\n     * - on updating to remove classes before remounting component\n     */\n    Events.on(['destroy', 'update'], function () {\n      Build.removeClasses();\n    });\n\n    /**\n     * Remount component:\n     * - on resizing of the window to calculate new dimentions\n     * - on updating settings via API\n     */\n    Events.on(['resize', 'update'], function () {\n      Build.mount();\n    });\n\n    /**\n     * Swap active class of current slide:\n     * - after each move to the new index\n     */\n    Events.on('move.after', function () {\n      Build.activeClass();\n    });\n\n    return Build;\n  }\n\n  function Clones (Glide, Components, Events) {\n    var Clones = {\n      /**\n       * Create pattern map and collect slides to be cloned.\n       */\n      mount: function mount() {\n        this.items = [];\n\n        if (Glide.isType('carousel')) {\n          this.items = this.collect();\n        }\n      },\n\n\n      /**\n       * Collect clones with pattern.\n       *\n       * @return {Void}\n       */\n      collect: function collect() {\n        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var slides = Components.Html.slides;\n        var _Glide$settings = Glide.settings,\n            perView = _Glide$settings.perView,\n            classes = _Glide$settings.classes;\n\n\n        var peekIncrementer = +!!Glide.settings.peek;\n        var part = perView + peekIncrementer;\n        var start = slides.slice(0, part);\n        var end = slides.slice(-part);\n\n        for (var r = 0; r < Math.max(1, Math.floor(perView / slides.length)); r++) {\n          for (var i = 0; i < start.length; i++) {\n            var clone = start[i].cloneNode(true);\n\n            clone.classList.add(classes.cloneSlide);\n\n            items.push(clone);\n          }\n\n          for (var _i = 0; _i < end.length; _i++) {\n            var _clone = end[_i].cloneNode(true);\n\n            _clone.classList.add(classes.cloneSlide);\n\n            items.unshift(_clone);\n          }\n        }\n\n        return items;\n      },\n\n\n      /**\n       * Append cloned slides with generated pattern.\n       *\n       * @return {Void}\n       */\n      append: function append() {\n        var items = this.items;\n        var _Components$Html = Components.Html,\n            wrapper = _Components$Html.wrapper,\n            slides = _Components$Html.slides;\n\n\n        var half = Math.floor(items.length / 2);\n        var prepend = items.slice(0, half).reverse();\n        var append = items.slice(half, items.length);\n\n        for (var i = 0; i < append.length; i++) {\n          wrapper.appendChild(append[i]);\n        }\n\n        for (var _i2 = 0; _i2 < prepend.length; _i2++) {\n          wrapper.insertBefore(prepend[_i2], slides[0]);\n        }\n\n        for (var _i3 = 0; _i3 < items.length; _i3++) {\n          items[_i3].style.width = Components.Sizes.slideWidth + 'px';\n        }\n      },\n\n\n      /**\n       * Remove all cloned slides.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        var items = this.items;\n\n\n        for (var i = 0; i < items.length; i++) {\n          Components.Html.wrapper.removeChild(items[i]);\n        }\n      }\n    };\n\n    define(Clones, 'grow', {\n      /**\n       * Gets additional dimentions value caused by clones.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;\n      }\n    });\n\n    /**\n     * Append additional slide's clones:\n     * - while glide's type is `carousel`\n     */\n    Events.on('update', function () {\n      Clones.remove();\n      Clones.mount();\n      Clones.append();\n    });\n\n    /**\n     * Append additional slide's clones:\n     * - while glide's type is `carousel`\n     */\n    Events.on('build.before', function () {\n      if (Glide.isType('carousel')) {\n        Clones.append();\n      }\n    });\n\n    /**\n     * Remove clones HTMLElements:\n     * - on destroying, to bring HTML to its initial state\n     */\n    Events.on('destroy', function () {\n      Clones.remove();\n    });\n\n    return Clones;\n  }\n\n  var EventsBinder = function () {\n    /**\n     * Construct a EventsBinder instance.\n     */\n    function EventsBinder() {\n      var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      classCallCheck(this, EventsBinder);\n\n      this.listeners = listeners;\n    }\n\n    /**\n     * Adds events listeners to arrows HTML elements.\n     *\n     * @param  {String|Array} events\n     * @param  {Element|Window|Document} el\n     * @param  {Function} closure\n     * @param  {Boolean|Object} capture\n     * @return {Void}\n     */\n\n\n    createClass(EventsBinder, [{\n      key: 'on',\n      value: function on(events, el, closure) {\n        var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n        if (isString(events)) {\n          events = [events];\n        }\n\n        for (var i = 0; i < events.length; i++) {\n          this.listeners[events[i]] = closure;\n\n          el.addEventListener(events[i], this.listeners[events[i]], capture);\n        }\n      }\n\n      /**\n       * Removes event listeners from arrows HTML elements.\n       *\n       * @param  {String|Array} events\n       * @param  {Element|Window|Document} el\n       * @return {Void}\n       */\n\n    }, {\n      key: 'off',\n      value: function off(events, el) {\n        if (isString(events)) {\n          events = [events];\n        }\n\n        for (var i = 0; i < events.length; i++) {\n          el.removeEventListener(events[i], this.listeners[events[i]], false);\n        }\n      }\n\n      /**\n       * Destroy collected listeners.\n       *\n       * @returns {Void}\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        delete this.listeners;\n      }\n    }]);\n    return EventsBinder;\n  }();\n\n  function Resize (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    var Resize = {\n      /**\n       * Initializes window bindings.\n       */\n      mount: function mount() {\n        this.bind();\n      },\n\n\n      /**\n       * Binds `rezsize` listener to the window.\n       * It's a costly event, so we are debouncing it.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('resize', window, throttle(function () {\n          Events.emit('resize');\n        }, Glide.settings.throttle));\n      },\n\n\n      /**\n       * Unbinds listeners from the window.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('resize', window);\n      }\n    };\n\n    /**\n     * Remove bindings from window:\n     * - on destroying, to remove added EventListener\n     */\n    Events.on('destroy', function () {\n      Resize.unbind();\n      Binder.destroy();\n    });\n\n    return Resize;\n  }\n\n  var VALID_DIRECTIONS = ['ltr', 'rtl'];\n  var FLIPED_MOVEMENTS = {\n    '>': '<',\n    '<': '>',\n    '=': '='\n  };\n\n  function Direction (Glide, Components, Events) {\n    var Direction = {\n      /**\n       * Setups gap value based on settings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.value = Glide.settings.direction;\n      },\n\n\n      /**\n       * Resolves pattern based on direction value\n       *\n       * @param {String} pattern\n       * @returns {String}\n       */\n      resolve: function resolve(pattern) {\n        var token = pattern.slice(0, 1);\n\n        if (this.is('rtl')) {\n          return pattern.split(token).join(FLIPED_MOVEMENTS[token]);\n        }\n\n        return pattern;\n      },\n\n\n      /**\n       * Checks value of direction mode.\n       *\n       * @param {String} direction\n       * @returns {Boolean}\n       */\n      is: function is(direction) {\n        return this.value === direction;\n      },\n\n\n      /**\n       * Applies direction class to the root HTML element.\n       *\n       * @return {Void}\n       */\n      addClass: function addClass() {\n        Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);\n      },\n\n\n      /**\n       * Removes direction class from the root HTML element.\n       *\n       * @return {Void}\n       */\n      removeClass: function removeClass() {\n        Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);\n      }\n    };\n\n    define(Direction, 'value', {\n      /**\n       * Gets value of the direction.\n       *\n       * @returns {Number}\n       */\n      get: function get() {\n        return Direction._v;\n      },\n\n\n      /**\n       * Sets value of the direction.\n       *\n       * @param {String} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        if (VALID_DIRECTIONS.indexOf(value) > -1) {\n          Direction._v = value;\n        } else {\n          warn('Direction value must be `ltr` or `rtl`');\n        }\n      }\n    });\n\n    /**\n     * Clear direction class:\n     * - on destroy to bring HTML to its initial state\n     * - on update to remove class before reappling bellow\n     */\n    Events.on(['destroy', 'update'], function () {\n      Direction.removeClass();\n    });\n\n    /**\n     * Remount component:\n     * - on update to reflect changes in direction value\n     */\n    Events.on('update', function () {\n      Direction.mount();\n    });\n\n    /**\n     * Apply direction class:\n     * - before building to apply class for the first time\n     * - on updating to reapply direction class that may changed\n     */\n    Events.on(['build.before', 'update'], function () {\n      Direction.addClass();\n    });\n\n    return Direction;\n  }\n\n  /**\n   * Reflects value of glide movement.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Rtl (Glide, Components) {\n    return {\n      /**\n       * Negates the passed translate if glide is in RTL option.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        if (Components.Direction.is('rtl')) {\n          return -translate;\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with a `gap` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Gap (Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with number in the `gap` settings.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        return translate + Components.Gaps.value * Glide.index;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with width of additional clones width.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Grow (Glide, Components) {\n    return {\n      /**\n       * Adds to the passed translate width of the half of clones.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        return translate + Components.Clones.grow / 2;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with a `peek` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Peeking (Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with a `peek` setting.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        if (Glide.settings.focusAt >= 0) {\n          var peek = Components.Peek.value;\n\n          if (isObject(peek)) {\n            return translate - peek.before;\n          }\n\n          return translate - peek;\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  /**\n   * Updates glide movement with a `focusAt` settings.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function Focusing (Glide, Components) {\n    return {\n      /**\n       * Modifies passed translate value with index in the `focusAt` setting.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      modify: function modify(translate) {\n        var gap = Components.Gaps.value;\n        var width = Components.Sizes.width;\n        var focusAt = Glide.settings.focusAt;\n        var slideWidth = Components.Sizes.slideWidth;\n\n        if (focusAt === 'center') {\n          return translate - (width / 2 - slideWidth / 2);\n        }\n\n        return translate - slideWidth * focusAt - gap * focusAt;\n      }\n    };\n  }\n\n  /**\n   * Applies diffrent transformers on translate value.\n   *\n   * @param  {Object} Glide\n   * @param  {Object} Components\n   * @return {Object}\n   */\n  function mutator (Glide, Components, Events) {\n    /**\n     * Merge instance transformers with collection of default transformers.\n     * It's important that the Rtl component be last on the list,\n     * so it reflects all previous transformations.\n     *\n     * @type {Array}\n     */\n    var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);\n\n    return {\n      /**\n       * Piplines translate value with registered transformers.\n       *\n       * @param  {Number} translate\n       * @return {Number}\n       */\n      mutate: function mutate(translate) {\n        for (var i = 0; i < TRANSFORMERS.length; i++) {\n          var transformer = TRANSFORMERS[i];\n\n          if (isFunction(transformer) && isFunction(transformer().modify)) {\n            translate = transformer(Glide, Components, Events).modify(translate);\n          } else {\n            warn('Transformer should be a function that returns an object with `modify()` method');\n          }\n        }\n\n        return translate;\n      }\n    };\n  }\n\n  function Translate (Glide, Components, Events) {\n    var Translate = {\n      /**\n       * Sets value of translate on HTML element.\n       *\n       * @param {Number} value\n       * @return {Void}\n       */\n      set: function set(value) {\n        var transform = mutator(Glide, Components).mutate(value);\n\n        Components.Html.wrapper.style.transform = 'translate3d(' + -1 * transform + 'px, 0px, 0px)';\n      },\n\n\n      /**\n       * Removes value of translate from HTML element.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        Components.Html.wrapper.style.transform = '';\n      }\n    };\n\n    /**\n     * Set new translate value:\n     * - on move to reflect index change\n     * - on updating via API to reflect possible changes in options\n     */\n    Events.on('move', function (context) {\n      var gap = Components.Gaps.value;\n      var length = Components.Sizes.length;\n      var width = Components.Sizes.slideWidth;\n\n      if (Glide.isType('carousel') && Components.Run.isOffset('<')) {\n        Components.Transition.after(function () {\n          Events.emit('translate.jump');\n\n          Translate.set(width * (length - 1));\n        });\n\n        return Translate.set(-width - gap * length);\n      }\n\n      if (Glide.isType('carousel') && Components.Run.isOffset('>')) {\n        Components.Transition.after(function () {\n          Events.emit('translate.jump');\n\n          Translate.set(0);\n        });\n\n        return Translate.set(width * length + gap * length);\n      }\n\n      return Translate.set(context.movement);\n    });\n\n    /**\n     * Remove translate:\n     * - on destroying to bring markup to its inital state\n     */\n    Events.on('destroy', function () {\n      Translate.remove();\n    });\n\n    return Translate;\n  }\n\n  function Transition (Glide, Components, Events) {\n    /**\n     * Holds inactivity status of transition.\n     * When true transition is not applied.\n     *\n     * @type {Boolean}\n     */\n    var disabled = false;\n\n    var Transition = {\n      /**\n       * Composes string of the CSS transition.\n       *\n       * @param {String} property\n       * @return {String}\n       */\n      compose: function compose(property) {\n        var settings = Glide.settings;\n\n        if (!disabled) {\n          return property + ' ' + this.duration + 'ms ' + settings.animationTimingFunc;\n        }\n\n        return property + ' 0ms ' + settings.animationTimingFunc;\n      },\n\n\n      /**\n       * Sets value of transition on HTML element.\n       *\n       * @param {String=} property\n       * @return {Void}\n       */\n      set: function set() {\n        var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n\n        Components.Html.wrapper.style.transition = this.compose(property);\n      },\n\n\n      /**\n       * Removes value of transition from HTML element.\n       *\n       * @return {Void}\n       */\n      remove: function remove() {\n        Components.Html.wrapper.style.transition = '';\n      },\n\n\n      /**\n       * Runs callback after animation.\n       *\n       * @param  {Function} callback\n       * @return {Void}\n       */\n      after: function after(callback) {\n        setTimeout(function () {\n          callback();\n        }, this.duration);\n      },\n\n\n      /**\n       * Enable transition.\n       *\n       * @return {Void}\n       */\n      enable: function enable() {\n        disabled = false;\n\n        this.set();\n      },\n\n\n      /**\n       * Disable transition.\n       *\n       * @return {Void}\n       */\n      disable: function disable() {\n        disabled = true;\n\n        this.set();\n      }\n    };\n\n    define(Transition, 'duration', {\n      /**\n       * Gets duration of the transition based\n       * on currently running animation type.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var settings = Glide.settings;\n\n        if (Glide.isType('slider') && Components.Run.offset) {\n          return settings.rewindDuration;\n        }\n\n        return settings.animationDuration;\n      }\n    });\n\n    /**\n     * Set transition `style` value:\n     * - on each moving, because it may be cleared by offset move\n     */\n    Events.on('move', function () {\n      Transition.set();\n    });\n\n    /**\n     * Disable transition:\n     * - before initial build to avoid transitioning from `0` to `startAt` index\n     * - while resizing window and recalculating dimentions\n     * - on jumping from offset transition at start and end edges in `carousel` type\n     */\n    Events.on(['build.before', 'resize', 'translate.jump'], function () {\n      Transition.disable();\n    });\n\n    /**\n     * Enable transition:\n     * - on each running, because it may be disabled by offset move\n     */\n    Events.on('run', function () {\n      Transition.enable();\n    });\n\n    /**\n     * Remove transition:\n     * - on destroying to bring markup to its inital state\n     */\n    Events.on('destroy', function () {\n      Transition.remove();\n    });\n\n    return Transition;\n  }\n\n  /**\n   * Test via a getter in the options object to see\n   * if the passive property is accessed.\n   *\n   * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n   */\n\n  var supportsPassive = false;\n\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supportsPassive = true;\n      }\n    });\n\n    window.addEventListener('testPassive', null, opts);\n    window.removeEventListener('testPassive', null, opts);\n  } catch (e) {}\n\n  var supportsPassive$1 = supportsPassive;\n\n  var START_EVENTS = ['touchstart', 'mousedown'];\n  var MOVE_EVENTS = ['touchmove', 'mousemove'];\n  var END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];\n  var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];\n\n  function Swipe (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    var swipeSin = 0;\n    var swipeStartX = 0;\n    var swipeStartY = 0;\n    var disabled = false;\n    var moveable = true;\n    var capture = supportsPassive$1 ? { passive: true } : false;\n\n    var Swipe = {\n      /**\n       * Initializes swipe bindings.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.bindSwipeStart();\n      },\n\n\n      /**\n       * Handler for `swipestart` event. Calculates entry points of the user's tap.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      start: function start(event) {\n        if (!disabled && !Glide.disabled) {\n          this.disable();\n\n          var swipe = this.touches(event);\n\n          moveable = true;\n          swipeSin = null;\n          swipeStartX = toInt(swipe.pageX);\n          swipeStartY = toInt(swipe.pageY);\n\n          this.bindSwipeMove();\n          this.bindSwipeEnd();\n\n          Events.emit('swipe.start');\n        }\n      },\n\n\n      /**\n       * Handler for `swipemove` event. Calculates user's tap angle and distance.\n       *\n       * @param {Object} event\n       */\n      move: function move(event) {\n        if (!Glide.disabled) {\n          var _Glide$settings = Glide.settings,\n              touchAngle = _Glide$settings.touchAngle,\n              touchRatio = _Glide$settings.touchRatio,\n              classes = _Glide$settings.classes;\n\n\n          var swipe = this.touches(event);\n\n          var subExSx = toInt(swipe.pageX) - swipeStartX;\n          var subEySy = toInt(swipe.pageY) - swipeStartY;\n          var powEX = Math.abs(subExSx << 2);\n          var powEY = Math.abs(subEySy << 2);\n          var swipeHypotenuse = Math.sqrt(powEX + powEY);\n          var swipeCathetus = Math.sqrt(powEY);\n\n          swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);\n\n          if (moveable && swipeSin * 180 / Math.PI < touchAngle) {\n            event.stopPropagation();\n\n            Components.Move.make(subExSx * toFloat(touchRatio));\n\n            Components.Html.root.classList.add(classes.dragging);\n\n            Events.emit('swipe.move');\n          } else {\n            moveable = false;\n\n            return false;\n          }\n        }\n      },\n\n\n      /**\n       * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      end: function end(event) {\n        if (!Glide.disabled) {\n          var settings = Glide.settings;\n\n          var swipe = this.touches(event);\n          var threshold = this.threshold(event);\n\n          var swipeDistance = swipe.pageX - swipeStartX;\n          var swipeDeg = swipeSin * 180 / Math.PI;\n          var steps = Math.round(swipeDistance / Components.Sizes.slideWidth);\n\n          this.enable();\n\n          if (moveable) {\n            if (swipeDistance > threshold && swipeDeg < settings.touchAngle) {\n              // While swipe is positive and greater than threshold move backward.\n              if (settings.perTouch) {\n                steps = Math.min(steps, toInt(settings.perTouch));\n              }\n\n              if (Components.Direction.is('rtl')) {\n                steps = -steps;\n              }\n\n              Components.Run.make(Components.Direction.resolve('<' + steps));\n            } else if (swipeDistance < -threshold && swipeDeg < settings.touchAngle) {\n              // While swipe is negative and lower than negative threshold move forward.\n              if (settings.perTouch) {\n                steps = Math.max(steps, -toInt(settings.perTouch));\n              }\n\n              if (Components.Direction.is('rtl')) {\n                steps = -steps;\n              }\n\n              Components.Run.make(Components.Direction.resolve('>' + steps));\n            } else {\n              // While swipe don't reach distance apply previous transform.\n              Components.Move.make();\n            }\n          }\n\n          Components.Html.root.classList.remove(settings.classes.dragging);\n\n          this.unbindSwipeMove();\n          this.unbindSwipeEnd();\n\n          Events.emit('swipe.end');\n        }\n      },\n\n\n      /**\n       * Binds swipe's starting event.\n       *\n       * @return {Void}\n       */\n      bindSwipeStart: function bindSwipeStart() {\n        var _this = this;\n\n        var settings = Glide.settings;\n\n        if (settings.swipeThreshold) {\n          Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {\n            _this.start(event);\n          }, capture);\n        }\n\n        if (settings.dragThreshold) {\n          Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {\n            _this.start(event);\n          }, capture);\n        }\n      },\n\n\n      /**\n       * Unbinds swipe's starting event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeStart: function unbindSwipeStart() {\n        Binder.off(START_EVENTS[0], Components.Html.wrapper);\n        Binder.off(START_EVENTS[1], Components.Html.wrapper);\n      },\n\n\n      /**\n       * Binds swipe's moving event.\n       *\n       * @return {Void}\n       */\n      bindSwipeMove: function bindSwipeMove() {\n        var _this2 = this;\n\n        Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n          _this2.move(event);\n        }, Glide.settings.throttle), capture);\n      },\n\n\n      /**\n       * Unbinds swipe's moving event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeMove: function unbindSwipeMove() {\n        Binder.off(MOVE_EVENTS, Components.Html.wrapper);\n      },\n\n\n      /**\n       * Binds swipe's ending event.\n       *\n       * @return {Void}\n       */\n      bindSwipeEnd: function bindSwipeEnd() {\n        var _this3 = this;\n\n        Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {\n          _this3.end(event);\n        });\n      },\n\n\n      /**\n       * Unbinds swipe's ending event.\n       *\n       * @return {Void}\n       */\n      unbindSwipeEnd: function unbindSwipeEnd() {\n        Binder.off(END_EVENTS, Components.Html.wrapper);\n      },\n\n\n      /**\n       * Normalizes event touches points accorting to different types.\n       *\n       * @param {Object} event\n       */\n      touches: function touches(event) {\n        if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n          return event;\n        }\n\n        return event.touches[0] || event.changedTouches[0];\n      },\n\n\n      /**\n       * Gets value of minimum swipe distance settings based on event type.\n       *\n       * @return {Number}\n       */\n      threshold: function threshold(event) {\n        var settings = Glide.settings;\n\n        if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n          return settings.dragThreshold;\n        }\n\n        return settings.swipeThreshold;\n      },\n\n\n      /**\n       * Enables swipe event.\n       *\n       * @return {self}\n       */\n      enable: function enable() {\n        disabled = false;\n\n        Components.Transition.enable();\n\n        return this;\n      },\n\n\n      /**\n       * Disables swipe event.\n       *\n       * @return {self}\n       */\n      disable: function disable() {\n        disabled = true;\n\n        Components.Transition.disable();\n\n        return this;\n      }\n    };\n\n    /**\n     * Add component class:\n     * - after initial building\n     */\n    Events.on('build.after', function () {\n      Components.Html.root.classList.add(Glide.settings.classes.swipeable);\n    });\n\n    /**\n     * Remove swiping bindings:\n     * - on destroying, to remove added EventListeners\n     */\n    Events.on('destroy', function () {\n      Swipe.unbindSwipeStart();\n      Swipe.unbindSwipeMove();\n      Swipe.unbindSwipeEnd();\n      Binder.destroy();\n    });\n\n    return Swipe;\n  }\n\n  function Images (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    var Images = {\n      /**\n       * Binds listener to glide wrapper.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.bind();\n      },\n\n\n      /**\n       * Binds `dragstart` event on wrapper to prevent dragging images.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('dragstart', Components.Html.wrapper, this.dragstart);\n      },\n\n\n      /**\n       * Unbinds `dragstart` event on wrapper.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('dragstart', Components.Html.wrapper);\n      },\n\n\n      /**\n       * Event handler. Prevents dragging.\n       *\n       * @return {Void}\n       */\n      dragstart: function dragstart(event) {\n        event.preventDefault();\n      }\n    };\n\n    /**\n     * Remove bindings from images:\n     * - on destroying, to remove added EventListeners\n     */\n    Events.on('destroy', function () {\n      Images.unbind();\n      Binder.destroy();\n    });\n\n    return Images;\n  }\n\n  function Anchors (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    /**\n     * Holds detaching status of anchors.\n     * Prevents detaching of already detached anchors.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    var detached = false;\n\n    /**\n     * Holds preventing status of anchors.\n     * If `true` redirection after click will be disabled.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    var prevented = false;\n\n    var Anchors = {\n      /**\n       * Setups a initial state of anchors component.\n       *\n       * @returns {Void}\n       */\n      mount: function mount() {\n        /**\n         * Holds collection of anchors elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._a = Components.Html.wrapper.querySelectorAll('a');\n\n        this.bind();\n      },\n\n\n      /**\n       * Binds events to anchors inside a track.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('click', Components.Html.wrapper, this.click);\n      },\n\n\n      /**\n       * Unbinds events attached to anchors inside a track.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('click', Components.Html.wrapper);\n      },\n\n\n      /**\n       * Handler for click event. Prevents clicks when glide is in `prevent` status.\n       *\n       * @param  {Object} event\n       * @return {Void}\n       */\n      click: function click(event) {\n        event.stopPropagation();\n\n        if (prevented) {\n          event.preventDefault();\n        }\n      },\n\n\n      /**\n       * Detaches anchors click event inside glide.\n       *\n       * @return {self}\n       */\n      detach: function detach() {\n        prevented = true;\n\n        if (!detached) {\n          for (var i = 0; i < this.items.length; i++) {\n            this.items[i].draggable = false;\n\n            this.items[i].setAttribute('data-href', this.items[i].getAttribute('href'));\n\n            this.items[i].removeAttribute('href');\n          }\n\n          detached = true;\n        }\n\n        return this;\n      },\n\n\n      /**\n       * Attaches anchors click events inside glide.\n       *\n       * @return {self}\n       */\n      attach: function attach() {\n        prevented = false;\n\n        if (detached) {\n          for (var i = 0; i < this.items.length; i++) {\n            this.items[i].draggable = true;\n\n            this.items[i].setAttribute('href', this.items[i].getAttribute('data-href'));\n          }\n\n          detached = false;\n        }\n\n        return this;\n      }\n    };\n\n    define(Anchors, 'items', {\n      /**\n       * Gets collection of the arrows HTML elements.\n       *\n       * @return {HTMLElement[]}\n       */\n      get: function get() {\n        return Anchors._a;\n      }\n    });\n\n    /**\n     * Detach anchors inside slides:\n     * - on swiping, so they won't redirect to its `href` attributes\n     */\n    Events.on('swipe.move', function () {\n      Anchors.detach();\n    });\n\n    /**\n     * Attach anchors inside slides:\n     * - after swiping and transitions ends, so they can redirect after click again\n     */\n    Events.on('swipe.end', function () {\n      Components.Transition.after(function () {\n        Anchors.attach();\n      });\n    });\n\n    /**\n     * Unbind anchors inside slides:\n     * - on destroying, to bring anchors to its initial state\n     */\n    Events.on('destroy', function () {\n      Anchors.attach();\n      Anchors.unbind();\n      Binder.destroy();\n    });\n\n    return Anchors;\n  }\n\n  var NAV_SELECTOR = '[data-glide-el=\"controls[nav]\"]';\n  var CONTROLS_SELECTOR = '[data-glide-el^=\"controls\"]';\n\n  function Controls (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    var Controls = {\n      /**\n       * Inits arrows. Binds events listeners\n       * to the arrows HTML elements.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        /**\n         * Collection of navigation HTML elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);\n\n        /**\n         * Collection of controls HTML elements.\n         *\n         * @private\n         * @type {HTMLCollection}\n         */\n        this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);\n\n        this.addBindings();\n      },\n\n\n      /**\n       * Sets active class to current slide.\n       *\n       * @return {Void}\n       */\n      setActive: function setActive() {\n        for (var i = 0; i < this._n.length; i++) {\n          this.addClass(this._n[i].children);\n        }\n      },\n\n\n      /**\n       * Removes active class to current slide.\n       *\n       * @return {Void}\n       */\n      removeActive: function removeActive() {\n        for (var i = 0; i < this._n.length; i++) {\n          this.removeClass(this._n[i].children);\n        }\n      },\n\n\n      /**\n       * Toggles active class on items inside navigation.\n       *\n       * @param  {HTMLElement} controls\n       * @return {Void}\n       */\n      addClass: function addClass(controls) {\n        var settings = Glide.settings;\n        var item = controls[Glide.index];\n\n        item.classList.add(settings.classes.activeNav);\n\n        siblings(item).forEach(function (sibling) {\n          sibling.classList.remove(settings.classes.activeNav);\n        });\n      },\n\n\n      /**\n       * Removes active class from active control.\n       *\n       * @param  {HTMLElement} controls\n       * @return {Void}\n       */\n      removeClass: function removeClass(controls) {\n        controls[Glide.index].classList.remove(Glide.settings.classes.activeNav);\n      },\n\n\n      /**\n       * Adds handles to the each group of controls.\n       *\n       * @return {Void}\n       */\n      addBindings: function addBindings() {\n        for (var i = 0; i < this._c.length; i++) {\n          this.bind(this._c[i].children);\n        }\n      },\n\n\n      /**\n       * Removes handles from the each group of controls.\n       *\n       * @return {Void}\n       */\n      removeBindings: function removeBindings() {\n        for (var i = 0; i < this._c.length; i++) {\n          this.unbind(this._c[i].children);\n        }\n      },\n\n\n      /**\n       * Binds events to arrows HTML elements.\n       *\n       * @param {HTMLCollection} elements\n       * @return {Void}\n       */\n      bind: function bind(elements) {\n        for (var i = 0; i < elements.length; i++) {\n          Binder.on(['click', 'touchstart'], elements[i], this.click);\n        }\n      },\n\n\n      /**\n       * Unbinds events binded to the arrows HTML elements.\n       *\n       * @param {HTMLCollection} elements\n       * @return {Void}\n       */\n      unbind: function unbind(elements) {\n        for (var i = 0; i < elements.length; i++) {\n          Binder.off(['click', 'touchstart'], elements[i]);\n        }\n      },\n\n\n      /**\n       * Handles `click` event on the arrows HTML elements.\n       * Moves slider in driection precised in\n       * `data-glide-dir` attribute.\n       *\n       * @param {Object} event\n       * @return {Void}\n       */\n      click: function click(event) {\n        event.preventDefault();\n\n        Components.Run.make(Components.Direction.resolve(event.currentTarget.getAttribute('data-glide-dir')));\n      }\n    };\n\n    define(Controls, 'items', {\n      /**\n       * Gets collection of the controls HTML elements.\n       *\n       * @return {HTMLElement[]}\n       */\n      get: function get() {\n        return Controls._c;\n      }\n    });\n\n    /**\n     * Swap active class of current navigation item:\n     * - after mounting to set it to initial index\n     * - after each move to the new index\n     */\n    Events.on(['mount.after', 'move.after'], function () {\n      Controls.setActive();\n    });\n\n    /**\n     * Remove bindings and HTML Classes:\n     * - on destroying, to bring markup to its initial state\n     */\n    Events.on('destroy', function () {\n      Controls.removeBindings();\n      Controls.removeActive();\n      Binder.destroy();\n    });\n\n    return Controls;\n  }\n\n  function Keyboard (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    var Keyboard = {\n      /**\n       * Binds keyboard events on component mount.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        if (Glide.settings.keyboard) {\n          this.bind();\n        }\n      },\n\n\n      /**\n       * Adds keyboard press events.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        Binder.on('keyup', document, this.press);\n      },\n\n\n      /**\n       * Removes keyboard press events.\n       *\n       * @return {Void}\n       */\n      unbind: function unbind() {\n        Binder.off('keyup', document);\n      },\n\n\n      /**\n       * Handles keyboard's arrows press and moving glide foward and backward.\n       *\n       * @param  {Object} event\n       * @return {Void}\n       */\n      press: function press(event) {\n        if (event.keyCode === 39) {\n          Components.Run.make(Components.Direction.resolve('>'));\n        }\n\n        if (event.keyCode === 37) {\n          Components.Run.make(Components.Direction.resolve('<'));\n        }\n      }\n    };\n\n    /**\n     * Remove bindings from keyboard:\n     * - on destroying to remove added events\n     * - on updating to remove events before remounting\n     */\n    Events.on(['destroy', 'update'], function () {\n      Keyboard.unbind();\n    });\n\n    /**\n     * Remount component\n     * - on updating to reflect potential changes in settings\n     */\n    Events.on('update', function () {\n      Keyboard.mount();\n    });\n\n    /**\n     * Destroy binder:\n     * - on destroying to remove listeners\n     */\n    Events.on('destroy', function () {\n      Binder.destroy();\n    });\n\n    return Keyboard;\n  }\n\n  function Autoplay (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    var Autoplay = {\n      /**\n       * Initializes autoplaying and events.\n       *\n       * @return {Void}\n       */\n      mount: function mount() {\n        this.start();\n\n        if (Glide.settings.hoverpause) {\n          this.bind();\n        }\n      },\n\n\n      /**\n       * Starts autoplaying in configured interval.\n       *\n       * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings\n       * @return {Void}\n       */\n      start: function start() {\n        var _this = this;\n\n        if (Glide.settings.autoplay) {\n          if (isUndefined(this._i)) {\n            this._i = setInterval(function () {\n              _this.stop();\n\n              Components.Run.make('>');\n\n              _this.start();\n            }, this.time);\n          }\n        }\n      },\n\n\n      /**\n       * Stops autorunning of the glide.\n       *\n       * @return {Void}\n       */\n      stop: function stop() {\n        this._i = clearInterval(this._i);\n      },\n\n\n      /**\n       * Stops autoplaying while mouse is over glide's area.\n       *\n       * @return {Void}\n       */\n      bind: function bind() {\n        var _this2 = this;\n\n        Binder.on('mouseover', Components.Html.root, function () {\n          _this2.stop();\n        });\n\n        Binder.on('mouseout', Components.Html.root, function () {\n          _this2.start();\n        });\n      },\n\n\n      /**\n       * Unbind mouseover events.\n       *\n       * @returns {Void}\n       */\n      unbind: function unbind() {\n        Binder.off(['mouseover', 'mouseout'], Components.Html.root);\n      }\n    };\n\n    define(Autoplay, 'time', {\n      /**\n       * Gets time period value for the autoplay interval. Prioritizes\n       * times in `data-glide-autoplay` attrubutes over options.\n       *\n       * @return {Number}\n       */\n      get: function get() {\n        var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');\n\n        if (autoplay) {\n          return toInt(autoplay);\n        }\n\n        return toInt(Glide.settings.autoplay);\n      }\n    });\n\n    /**\n     * Stop autoplaying and unbind events:\n     * - on destroying, to clear defined interval\n     * - on updating via API to reset interval that may changed\n     */\n    Events.on(['destroy', 'update'], function () {\n      Autoplay.unbind();\n    });\n\n    /**\n     * Stop autoplaying:\n     * - before each run, to restart autoplaying\n     * - on pausing via API\n     * - on destroying, to clear defined interval\n     * - while starting a swipe\n     * - on updating via API to reset interval that may changed\n     */\n    Events.on(['run.before', 'pause', 'destroy', 'swipe.start', 'update'], function () {\n      Autoplay.stop();\n    });\n\n    /**\n     * Start autoplaying:\n     * - after each run, to restart autoplaying\n     * - on playing via API\n     * - while ending a swipe\n     */\n    Events.on(['run.after', 'play', 'swipe.end'], function () {\n      Autoplay.start();\n    });\n\n    /**\n     * Remount autoplaying:\n     * - on updating via API to reset interval that may changed\n     */\n    Events.on('update', function () {\n      Autoplay.mount();\n    });\n\n    /**\n     * Destroy a binder:\n     * - on destroying glide instance to clearup listeners\n     */\n    Events.on('destroy', function () {\n      Binder.destroy();\n    });\n\n    return Autoplay;\n  }\n\n  /**\n   * Sorts keys of breakpoint object so they will be ordered from lower to bigger.\n   *\n   * @param {Object} points\n   * @returns {Object}\n   */\n  function sortBreakpoints(points) {\n    if (isObject(points)) {\n      return sortKeys(points);\n    } else {\n      warn('Breakpoints option must be an object');\n    }\n\n    return {};\n  }\n\n  function Breakpoints (Glide, Components, Events) {\n    /**\n     * Instance of the binder for DOM Events.\n     *\n     * @type {EventsBinder}\n     */\n    var Binder = new EventsBinder();\n\n    /**\n     * Holds reference to settings.\n     *\n     * @type {Object}\n     */\n    var settings = Glide.settings;\n\n    /**\n     * Holds reference to breakpoints object in settings. Sorts breakpoints\n     * from smaller to larger. It is required in order to proper\n     * matching currently active breakpoint settings.\n     *\n     * @type {Object}\n     */\n    var points = sortBreakpoints(settings.breakpoints);\n\n    /**\n     * Cache initial settings before overwritting.\n     *\n     * @type {Object}\n     */\n    var defaults = _extends({}, settings);\n\n    var Breakpoints = {\n      /**\n       * Matches settings for currectly matching media breakpoint.\n       *\n       * @param {Object} points\n       * @returns {Object}\n       */\n      match: function match(points) {\n        if (typeof window.matchMedia !== 'undefined') {\n          for (var point in points) {\n            if (points.hasOwnProperty(point)) {\n              if (window.matchMedia('(max-width: ' + point + 'px)').matches) {\n                return points[point];\n              }\n            }\n          }\n        }\n\n        return defaults;\n      }\n    };\n\n    /**\n     * Overwrite instance settings with currently matching breakpoint settings.\n     * This happens right after component initialization.\n     */\n    _extends(settings, Breakpoints.match(points));\n\n    /**\n     * Update glide with settings of matched brekpoint:\n     * - window resize to update slider\n     */\n    Binder.on('resize', window, throttle(function () {\n      Glide.settings = mergeOptions(settings, Breakpoints.match(points));\n    }, Glide.settings.throttle));\n\n    /**\n     * Resort and update default settings:\n     * - on reinit via API, so breakpoint matching will be performed with options\n     */\n    Events.on('update', function () {\n      points = sortBreakpoints(points);\n\n      defaults = _extends({}, settings);\n    });\n\n    /**\n     * Unbind resize listener:\n     * - on destroying, to bring markup to its initial state\n     */\n    Events.on('destroy', function () {\n      Binder.off('resize', window);\n    });\n\n    return Breakpoints;\n  }\n\n  var COMPONENTS = {\n    // Required\n    Html: Html,\n    Translate: Translate,\n    Transition: Transition,\n    Direction: Direction,\n    Peek: Peek,\n    Sizes: Sizes,\n    Gaps: Gaps,\n    Move: Move,\n    Clones: Clones,\n    Resize: Resize,\n    Build: Build,\n    Run: Run,\n\n    // Optional\n    Swipe: Swipe,\n    Images: Images,\n    Anchors: Anchors,\n    Controls: Controls,\n    Keyboard: Keyboard,\n    Autoplay: Autoplay,\n    Breakpoints: Breakpoints\n  };\n\n  var Glide$1 = function (_Core) {\n    inherits(Glide$$1, _Core);\n\n    function Glide$$1() {\n      classCallCheck(this, Glide$$1);\n      return possibleConstructorReturn(this, (Glide$$1.__proto__ || Object.getPrototypeOf(Glide$$1)).apply(this, arguments));\n    }\n\n    createClass(Glide$$1, [{\n      key: 'mount',\n      value: function mount() {\n        var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return get(Glide$$1.prototype.__proto__ || Object.getPrototypeOf(Glide$$1.prototype), 'mount', this).call(this, _extends({}, COMPONENTS, extensions));\n      }\n    }]);\n    return Glide$$1;\n  }(Glide);\n\n  return Glide$1;\n\n})));\n","var as,\naos = {\n\tsettings: {\n\t\t// slide: $('.slide'),\n\t\t// slideList: $('.slide-list')\n\t},\n\tinit: function() {\n\t\tas = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('aos loaded!');\n\t},\n\tbindUIActions: function() {\n\n\t}\n};\n","var ac,\naccordions = {\n\tsettings: {\n\t\taccItem: $('.acc-item'),\n\t\taccContent: $('.acc-item .acc-content'),\n\t\ttitle: $('.acc-item .title')\n\t},\n\tinit: function() {\n\t\tac = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('accordions loaded!');\n\t},\n\tbindUIActions: function() {\n\t\tac.title.on('click', function() {\n\t\t\t$(this).closest('.acc-item').find('.acc-content').slideToggle( '3000', function() {\n\t\t\t\t// Animation complete.\n\t\t\t});\n\t\t});\n\t}\n};\n","var cn,\ncookieNotice = {\n\tsettings: {\n\t\tnotice: $('.cookie-notice'),\n\t\tclose: $('.cookie-notice .close')\n\t},\n\tinit: function() {\n\t\tcn = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('cookieNotice loaded!');\n\t},\n\tbindUIActions: function() {\n\t\tcn.close.on('click', function() {\n\t\t\tcn.notice.addClass('move');\n\t\t\tsetTimeout(function(){\n\t\t\t\tcn.notice.addClass('hide');\n\t\t\t}, 600);\n\t\t});\n\t}\n};\n","var nf,\nnotification = {\n\tsettings: {\n\t\tnotice: $('.notification'),\n\t\tclose: $('.notification .close')\n\t},\n\tinit: function() {\n\t\tnf = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('notification loaded!');\n\t},\n\tbindUIActions: function() {\n\t\tnf.close.on('click', function() {\n\t\t\tnf.notice.addClass('hide');\n\t\t});\n\t}\n};\n","var rq,\nrandomQuote = {\n\tsettings: {\n\t\tquoteList: $('.splash li'),\n\t\trandom: Math.floor(Math.random() * $('.splash li').length),\n\t},\n\tinit: function() {\n\t\trq = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('randomQuote loaded!');\n\t},\n\tbindUIActions: function() {\n\t\trq.quoteList.hide().eq(rq.random).show();\n\t}\n};\n","var gl,\nglide = {\n\tsettings: {\n\n\t},\n\tinit: function() {\n\t\tgl = this.settings;\n\t\tthis.bindUIActions();\n\t\tconsole.log('glide loaded!');\n\t},\n\tbindUIActions: function() {\n\t\tvar glide = new Glide('.glide', {\n\t\t\ttype: 'carousel',\n\t\t\tstartAt: 0,\n\t\t\tperView: 3\n\t\t})\n\t\tglide.mount();\n\t}\n};\n","document.addEventListener(\"DOMContentLoaded\", function() {\n\n    'use strict';\n\n    // code\n    accordions.init();\n    cookieNotice.init();\n    notification.init();\n    randomQuote.init();\n    glide.init();\n    rellax.init();\n    aos.init();\n\n});\n"]}